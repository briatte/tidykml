% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/kml_lines.R
\name{kml_lines}
\alias{kml_lines}
\title{Read Lines out of a KML file.}
\usage{
kml_lines(x, ns = "d1", verbose = TRUE, ...)
}
\arguments{
\item{x}{A KML source. See \link{kml_read}.}

\item{ns}{The name of the namespace to extract from: defaults to \code{"d1"}.}

\item{verbose}{Whether to report invalid coordinates and/or altitudes below
sea level; defaults to \code{TRUE}. See \link{kml_coords}.}

\item{...}{Arguments passed to \link[xml2:read_xml]{read_xml}. 
See \link{kml_read}.}
}
\value{
A \link[tibble:tibble]{tibble} containing the \code{folder} (layer), 
\code{name}, \code{description}, \code{styleUrl} and geographic coordinates 
(\code{longitude}, \code{latitude} and \code{altitude}) of the \emph{first}
LineString contained within each Placemark element of the KML source. 
Other Placemark elements will be ignored.

If there are no LineStrings in the KML source, the function returns 
\code{NULL}.
If there are no Folders in the KML source, the \code{folder} variable will be
filled with \code{NA}.
}
\description{
Read Lines out of a KML file.
}
\note{
The function only extracts the \strong{first} LineString out of each
Placemark element. As a result, multi-LineStrings built into <MultiGeometry> 
elements are \emph{not} fully supported: only the first LineString will be 
present in the results.
}
\examples{
# demo data: U.S. Civil War map
# see ?states for details
f <- system.file("extdata", "states.kml.zip", package = "tidykml")
kml_lines(f)
}
\seealso{
Google Developers. KML Reference: <Point> Element.
\url{https://developers.google.com/kml/documentation/kmlreference#linestring}
}

